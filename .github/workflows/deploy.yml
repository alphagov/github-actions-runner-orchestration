name: Deploy self-hosted runner

on:
  workflow_dispatch:

jobs:
  get-main-deploy-runner:
    environment: aws_dev
    runs-on: ubuntu-latest
    name: Get the main deploy runner using prod API
    outputs:
      name: ${{ steps.garoclient.outputs.name }}
      runnerstate: ${{ steps.garoclient.outputs.runnerstate }}
    steps:
      - name: Get runner
        uses: alphagov/github-actions-runner-orchestration/client@main
        id: garoclient
        with:
          ACTION: 'start'
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          RUNNER_TYPE: 'ondemand'
          RUNNER_LABEL: 'from_prod'
          REPO: '${{ github.repository }}'
          GITHUB_COMMIT: '${{ github.sha }}'
          RUNNER_SUBNET: '${{ secrets.RUNNER_SUBNET }}'
          RUNNER_SG: '${{ secrets.RUNNER_SG }}'
          RUNNER_ACID: '${{ secrets.RUNNER_ACID }}'
          RUNNER_EXID: '${{ secrets.RUNNER_EXID }}'
          GARO_URL: 'https://prod.co-cdio-garo.digital'
          RUNNER_TIMEOUT: '3600'

      - name: Output runner details
        run: |
          echo "Name: ${{ steps.garoclient.outputs.name }}"
          echo "State: ${{ steps.garoclient.outputs.runnerstate }}"

  deploy-to-staging:
    name: Deploy to staging
    runs-on: [self-hosted, linux, from_prod, "${{ needs.get-main-deploy-runner.outputs.name }}"]
    defaults:
      run:
        shell: bash
    needs: get-main-deploy-runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: main
    - run: |
        source ~/.bash_profile

        cd main/
        make test-full
        make build-full

        cd garo_terraform/
        tfenv install
        tfenv use
        terraform init
        terraform validate
        terraform workspace list
        terraform workspace select staging
        terraform apply -auto-approve

  get-test-staging-runner:
    environment: aws_dev
    runs-on: ubuntu-latest
    name: Start a runner using the staging API
    needs: deploy-to-staging
    outputs:
      name: ${{ steps.garoclient.outputs.name }}
      runnerstate: ${{ steps.garoclient.outputs.runnerstate }}
    steps:
      - name: Get runner
        uses: alphagov/github-actions-runner-orchestration/client@main
        id: garoclient
        with:
          ACTION: 'start'
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          RUNNER_TYPE: 'spot'
          RUNNER_LABEL: 'staging_test_runner'
          REPO: '${{ github.repository }}'
          GITHUB_COMMIT: '${{ github.sha }}'
          RUNNER_SUBNET: '${{ secrets.RUNNER_SUBNET }}'
          RUNNER_SG: '${{ secrets.RUNNER_SG }}'
          RUNNER_ACID: '${{ secrets.RUNNER_ACID }}'
          RUNNER_EXID: '${{ secrets.RUNNER_EXID }}'
          GARO_URL: 'https://staging.co-cdio-garo.digital'
          RUNNER_TIMEOUT: '300'

      - name: Output runner details
        run: |
          echo "Name: ${{ steps.garoclient.outputs.name }}"
          echo "State: ${{ steps.garoclient.outputs.runnerstate }}"

  use-staging-runner:
    name: Test the staging runner
    runs-on: [self-hosted, linux, "${{ needs.get-test-staging-runner.outputs.name }}"]
    defaults:
      run:
        shell: bash
    needs: get-test-staging-runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: main
    - run: |
        source ~/.bash_profile
        ls -lah main
        aws sts get-caller-identity
        docker run hello-world

  deploy-to-prod:
    name: Deploy to production
    runs-on: [self-hosted, linux, from_prod, "${{ needs.get-main-deploy-runner.outputs.name }}"]
    defaults:
      run:
        shell: bash
    needs: get-main-deploy-runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: main
    - run: |
        source ~/.bash_profile

        cd main/
        make test-full
        make build-full

        cd garo_terraform/
        tfenv install
        tfenv use
        terraform init
        terraform validate
        terraform workspace list
        terraform workspace select prod
        terraform apply -auto-approve

  get-test-prod-runner:
    environment: aws_dev
    runs-on: ubuntu-latest
    name: Start a runner using the prod API
    needs: deploy-to-staging
    outputs:
      name: ${{ steps.garoclient.outputs.name }}
      runnerstate: ${{ steps.garoclient.outputs.runnerstate }}
    steps:
      - name: Get runner
        uses: alphagov/github-actions-runner-orchestration/client@main
        id: garoclient
        with:
          ACTION: 'start'
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          RUNNER_TYPE: 'spot'
          RUNNER_LABEL: 'prod_test_runner'
          REPO: '${{ github.repository }}'
          GITHUB_COMMIT: '${{ github.sha }}'
          RUNNER_SUBNET: '${{ secrets.RUNNER_SUBNET }}'
          RUNNER_SG: '${{ secrets.RUNNER_SG }}'
          RUNNER_ACID: '${{ secrets.RUNNER_ACID }}'
          RUNNER_EXID: '${{ secrets.RUNNER_EXID }}'
          GARO_URL: 'https://prod.co-cdio-garo.digital'
          RUNNER_TIMEOUT: '300'

      - name: Output runner details
        run: |
          echo "Name: ${{ steps.garoclient.outputs.name }}"
          echo "State: ${{ steps.garoclient.outputs.runnerstate }}"

  use-prod-runner:
    name: Test the production runner
    runs-on: [self-hosted, linux, "${{ needs.get-test-prod-runner.outputs.name }}"]
    defaults:
      run:
        shell: bash
    needs: get-test-prod-runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: main
    - run: |
        source ~/.bash_profile
        ls -lah main
        aws sts get-caller-identity
        docker run hello-world
